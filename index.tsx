
// This file should be renamed to index.js

import * as THREE from 'three';

const characters = {
  professorBugsy: {
    name: "Professor Bugsy",
    emoji: "üêû" 
  }
};

// Initial Data - Based on "Certified Tester Foundation Level Syllabus"
const syllabusData = [
  {
    id: "ch1",
    title: "Cap√≠tulo 1: Fundamentos de Teste",
    characterIcon: "üìö", 
    description: "Aprenda o b√°sico sobre testes de software.",
    lessons: [
      {
        id: "1.1",
        title: "1.1 O que √© teste?",
        icon: "‚ùì", 
        locked: false,
        completed: false,
        slides: [
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Ol√°, futuro Mestre dos Testes! üëã Sou a Professora Bugsy! Software est√° em tudo: celulares, computadores, at√© na TV! Mas... e quando ele falha? Pode ser um problem√£o! Perder tempo, dinheiro... um caos!"
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Por isso, o Teste de Software √© nosso super-her√≥i! Ele nos ajuda a verificar a qualidade do software e a reduzir os riscos de falhas chatas. Vamos descobrir juntos como ele faz essa m√°gica?"
          },
          {
            type: 'quiz',
            character: 'professorBugsy',
            question: "Qual o principal objetivo do Teste de Software, segundo a Professora Bugsy?",
            options: [
              { text: "Escrever c√≥digo mais r√°pido.", correct: false },
              { text: "Avaliar a qualidade do software e reduzir riscos.", correct: true },
              { text: "Criar designs de interface bonitos.", correct: false },
              { text: "Vender mais produtos de software.", correct: false }
            ],
            feedbackCorrect: "Exato! Voc√™ est√° pegando o jeito! ü•≥",
            feedbackIncorrect: "Opa! Quase l√°! A ideia principal √© garantir a qualidade e seguran√ßa.",
            explanation: "Testar software busca avaliar sua qualidade e diminuir a chance de problemas quando estiver em uso."
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "O teste de software n√£o √© apenas executar o software e verificar os resultados. Envolve tamb√©m atividades como planejamento, an√°lise, modelagem e implementa√ß√£o de testes. Uma vis√£o completa!"
          },
          {
            type: 'quiz',
            character: 'professorBugsy',
            question: "O teste de software se resume apenas √† execu√ß√£o de testes?",
            options: [
              { text: "Sim, √© a √∫nica atividade importante.", correct: false },
              { text: "N√£o, envolve outras atividades como planejamento e an√°lise.", correct: true },
              { text: "Sim, desde que seja feito por desenvolvedores.", correct: false }
            ],
            feedbackCorrect: "Correto! Testar √© um processo com v√°rias etapas importantes. ‚ú®",
            feedbackIncorrect: "Na verdade, a execu√ß√£o √© s√≥ uma parte! H√° muito mais por tr√°s dos panos.",
            explanation: "O teste de software √© um processo que inclui diversas atividades, como planejamento, monitoramento, controle, an√°lise, modelagem, implementa√ß√£o, execu√ß√£o e conclus√£o."
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "√ìtimo trabalho! Lembre-se, testar √© um processo multifacetado! Continuaremos explorando isso. ‚ú®"
          }
        ]
      },
      { 
        id: "1.2", 
        title: "1.2 Por que os testes s√£o necess√°rios?", 
        icon: "üí°", 
        locked: true, 
        completed: false, 
        slides: [
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Ent√£o, por que testar √© t√£o crucial? ü§î Pense nos testes como guardi√µes da qualidade! Eles ajudam a entregar projetos no prazo, dentro do or√ßamento e com a qualidade que todos esperam."
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Encontrar defeitos cedo √© super econ√¥mico! üí∞ Corrigir um probleminha no in√≠cio √© muito mais f√°cil e barato do que consertar um problem√£o depois que o software j√° foi lan√ßado. Testes ajudam indiretamente a termos softwares de maior qualidade!"
          },
           {
            type: 'quiz',
            character: 'professorBugsy',
            question: "Por que √© considerado econ√¥mico encontrar defeitos cedo no ciclo de desenvolvimento?",
            options: [
              { text: "Porque os testadores cobram menos no in√≠cio.", correct: false },
              { text: "Porque √© mais f√°cil e barato corrigir defeitos em fases iniciais.", correct: true },
              { text: "Porque os usu√°rios n√£o percebem defeitos em vers√µes iniciais.", correct: false },
              { text: "Porque defeitos iniciais n√£o impactam o cronograma.", correct: false }
            ],
            feedbackCorrect: "Isso mesmo! Economia inteligente! üí∏",
            feedbackIncorrect: "Pense no esfor√ßo para consertar algo pequeno versus algo grande e j√° estabelecido.",
            explanation: "Identificar e corrigir defeitos em est√°gios iniciais do ciclo de vida de desenvolvimento de software √© significativamente menos custoso do que corrigi-los em fases posteriores ou ap√≥s o lan√ßamento."
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "E tem mais! Testes d√£o uma 'espiadinha' na qualidade do software em v√°rias etapas. Isso ajuda a decidir se o software est√° pronto para o pr√≥ximo n√≠vel ou para ser lan√ßado! üöÄ"
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Voc√™ j√° ouviu falar em QA (Garantia da Qualidade)? Teste e QA s√£o parceiros, mas n√£o s√£o a mesma coisa! Teste √© uma forma de Controle de Qualidade (QC), focado em encontrar defeitos no produto. J√° o QA √© mais amplo, focado em melhorar os processos para prevenir defeitos. Todos no projeto s√£o respons√°veis pelo QA!"
          },
          {
            type: 'quiz',
            character: 'professorBugsy',
            question: "Qual a diferen√ßa principal entre Teste (como QC) e QA (Garantia da Qualidade)?",
            options: [
              { text: "Teste foca nos processos, QA foca no produto.", correct: false },
              { text: "Teste √© sobre encontrar defeitos no produto, QA √© sobre melhorar processos para prevenir defeitos.", correct: true },
              { text: "S√£o exatamente a mesma coisa.", correct: false },
              { text: "Apenas testadores fazem QA.", correct: false }
            ],
            feedbackCorrect: "Brilhante! ‚ú® Voc√™ entendeu a parceria entre eles!",
            feedbackIncorrect: "Hmm, reveja a dica! Teste √© mais 'm√£o na massa' no produto, e QA √© mais sobre o 'como fazer'.",
            explanation: "O Teste (como Controle de Qualidade) foca em identificar defeitos no software. A Garantia da Qualidade (QA) √© mais abrangente, visando aprimorar os processos de desenvolvimento e teste para evitar que defeitos ocorram."
          },
          {
            type: 'content',
            character: 'professorBugsy',
            text: "Humanos cometem erros (equ√≠vocos), que geram defeitos (bugs), que podem causar falhas no software. Analisar a causa raiz desses erros nos ajuda a evitar que aconte√ßam de novo! √â como aprender com os trope√ßos. üòâ"
          },
          {
            type: 'quiz',
            character: 'professorBugsy',
            question: "O que √© uma 'causa raiz' de um defeito?",
            options: [
              { text: "A primeira falha observada pelo usu√°rio.", correct: false },
              { text: "O motivo fundamental para a ocorr√™ncia de um problema.", correct: true },
              { text: "O defeito em si, tamb√©m conhecido como bug.", correct: false },
              { text: "A consequ√™ncia do defeito no sistema.", correct: false }
            ],
            feedbackCorrect: "Exatamente! Encontrar a raiz ajuda a evitar que o problema cres√ßa de novo! üå±",
            feedbackIncorrect: "Pense na origem, na raz√£o fundamental pela qual o erro aconteceu.",
            explanation: "A causa raiz √© o motivo fundamental que levou √† ocorr√™ncia de um erro e, consequentemente, a um defeito. Identificar e corrigir a causa raiz ajuda a prevenir defeitos semelhantes no futuro."
          }
        ] 
      },
      { 
        id: "1.3", 
        title: "1.3 Princ√≠pios de Teste", 
        icon: "üìú", 
        locked: true, 
        completed: false, 
        slides: [
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Existem alguns 'mandamentos' no mundo dos testes, s√£o os 7 Princ√≠pios de Teste! Eles s√£o como um mapa do tesouro para testar de forma eficaz. Vamos conhec√™-los?"
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 1: Teste mostra a presen√ßa de defeitos, n√£o a aus√™ncia. ü§Ø Mesmo que testemos muito e n√£o achemos nada, n√£o podemos garantir 100% que n√£o existem defeitos escondidos!"
            },
            {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Se, ap√≥s extensivos testes, nenhum defeito for encontrado, podemos afirmar que o software est√° 100% livre de defeitos?",
                options: [
                  { text: "Sim, se os testes cobriram todas as funcionalidades.", correct: false },
                  { text: "N√£o, o teste apenas reduz a probabilidade de defeitos remanescentes.", correct: true },
                  { text: "Sim, se foram usados testadores experientes.", correct: false }
                ],
                feedbackCorrect: "Correto! O teste nos d√° confian√ßa, mas n√£o certeza absoluta da aus√™ncia de defeitos.",
                feedbackIncorrect: "Lembre-se do Princ√≠pio 1: Teste mostra a presen√ßa, n√£o a aus√™ncia.",
                explanation: "O Princ√≠pio 1 afirma que o teste pode revelar a presen√ßa de defeitos, mas n√£o pode provar sua aus√™ncia total. Mesmo testes rigorosos podem n√£o encontrar todos os defeitos."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 2: Testes exaustivos s√£o imposs√≠veis. ‚è≥ Testar TUDO (todas as combina√ß√µes, todas as entradas) levaria uma eternidade! Por isso, usamos t√©cnicas e prioriza√ß√£o para focar no mais importante."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 3: Testes antecipados economizam tempo e dinheiro. üí∞ Lembra que falamos disso? Encontrar e corrigir defeitos no in√≠cio √© muito mais barato do que no final do projeto."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 4: Os defeitos se agrupam.  Clustering! üêûüêûüêû √â comum que uma pequena parte do sistema contenha a maioria dos defeitos. Ficar de olho nessas √°reas √© uma boa estrat√©gia!"
            },
             {
                type: 'quiz',
                character: 'professorBugsy',
                question: "O que significa o princ√≠pio 'Os defeitos se agrupam'?",
                options: [
                  { text: "Os defeitos aparecem todos de uma vez.", correct: false },
                  { text: "A maioria dos defeitos tende a se concentrar em um pequeno n√∫mero de m√≥dulos ou componentes.", correct: true },
                  { text: "Todos os defeitos s√£o do mesmo tipo.", correct: false },
                  { text: "√â preciso agrupar os defeitos por severidade.", correct: false }
                ],
                feedbackCorrect: "Exato! Focar nessas √°reas de 'clustering' √© uma t√°tica inteligente!",
                feedbackIncorrect: "Pense onde os 'bichinhos' (bugs) gostam de se esconder em grupo!",
                explanation: "O Princ√≠pio 4 (Os defeitos se agrupam) indica que uma pequena quantidade de m√≥dulos ou componentes geralmente cont√©m a maioria dos defeitos descobertos ou √© respons√°vel pela maioria das falhas operacionais (Princ√≠pio de Pareto)."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 5: Os testes se degradam (Paradoxo do Pesticida). üêõ Se repetirmos os mesmos testes v√°rias vezes, eles perdem a efic√°cia para encontrar novos defeitos. √â preciso variar e atualizar os testes!"
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 6: Os testes dependem do contexto. üåê N√£o existe uma receita de bolo √∫nica para testar! O jeito de testar um app de banco √© diferente de testar um jogo, por exemplo."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Princ√≠pio 7: Fal√°cia da aus√™ncia de defeitos. ‚úîÔ∏è Mesmo que um software n√£o tenha nenhum defeito t√©cnico, ele pode n√£o atender √†s necessidades do usu√°rio ou ser in√∫til. Qualidade vai al√©m de 'sem bugs'!"
            },
            {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Qual princ√≠pio de teste nos diz que se usarmos sempre os mesmos testes, eles podem parar de encontrar novos defeitos?",
                options: [
                  { text: "Teste mostra a presen√ßa de defeitos.", correct: false },
                  { text: "Os defeitos se agrupam.", correct: false },
                  { text: "Os testes se degradam (Paradoxo do Pesticida).", correct: true },
                  { text: "Testes dependem do contexto.", correct: false }
                ],
                feedbackCorrect: "Isso a√≠! Voc√™ est√° afiado nos princ√≠pios! üéØ",
                feedbackIncorrect: "Pense como um fazendeiro usando o mesmo pesticida sempre... os insetos podem ficar resistentes! üòâ",
                explanation: "O Paradoxo do Pesticida (Princ√≠pio 5) alerta que repetir os mesmos testes continuamente os torna menos eficazes para descobrir novos defeitos, pois o sistema pode ter sido corrigido para esses casos espec√≠ficos."
            }
        ]
      },
      { 
        id: "1.4", 
        title: "1.4 Atividades de teste, Testware e Pap√©is de teste", 
        icon: "üõ†Ô∏è", 
        locked: true, 
        completed: false, 
        slides: [
            {
                type: 'content',
                character: 'professorBugsy',
                text: "O processo de teste √© uma jornada com v√°rias paradas! Temos 7 atividades principais: Planejamento, Monitoramento e Controle, An√°lise, Modelagem (Design), Implementa√ß√£o, Execu√ß√£o e Conclus√£o."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "No Planejamento, definimos o que e como testar. Monitoramento e Controle √© ficar de olho no progresso. An√°lise √© entender a base do teste. Modelagem √© criar os casos de teste. Implementa√ß√£o √© preparar tudo para rodar. Execu√ß√£o √©... rodar os testes! E Conclus√£o √© finalizar e aprender."
            },
             {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Qual das atividades de teste √© respons√°vel por definir os objetivos do teste e selecionar uma abordagem?",
                options: [
                  { text: "Execu√ß√£o de Teste", correct: false },
                  { text: "Planejamento de Teste", correct: true },
                  { text: "An√°lise de Teste", correct: false },
                  { text: "Conclus√£o de Teste", correct: false }
                ],
                feedbackCorrect: "Correto! Um bom plano √© o come√ßo de tudo!",
                feedbackIncorrect: "Pense na primeira etapa, onde definimos o 'mapa' da nossa jornada de testes.",
                explanation: "O Planejamento do Teste consiste em definir os objetivos do teste e selecionar uma abordagem que melhor atinja esses objetivos dentro das restri√ß√µes do contexto."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "E o que √© Testware? S√£o todos os artefatos produzidos durante o teste: planos de teste, casos de teste, scripts, dados de teste, relat√≥rios... tudo que usamos e criamos!"
            },
            {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Um script de teste automatizado √© considerado um exemplo de qu√™?",
                options: [
                  { text: "Base de Teste", correct: false },
                  { text: "Testware", correct: true },
                  { text: "Objeto de Teste", correct: false },
                  { text: "Condi√ß√£o de Teste", correct: false }
                ],
                feedbackCorrect: "Isso a√≠! Testware s√£o as ferramentas e documentos do testador!",
                feedbackIncorrect: "Pense nos 'materiais' que usamos ou criamos para testar.",
                explanation: "Testware inclui todos os produtos de trabalho criados durante o processo de teste, como planos de teste, casos de teste, scripts de teste (manuais ou automatizados), dados de teste, e relat√≥rios de teste."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Nosso time de her√≥is dos testes geralmente tem dois pap√©is chave: O Gerente de Teste, que lidera e organiza tudo, e o Testador, que √© o especialista t√©cnico em encontrar os bugs!"
            },
            {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Qual atividade de teste envolve a cria√ß√£o de casos de teste e a prepara√ß√£o do ambiente de teste?",
                options: [
                  { text: "Planejamento de Teste", correct: false },
                  { text: "An√°lise e Modelagem de Teste", correct: true },
                  { text: "Execu√ß√£o de Teste", correct: false },
                  { text: "Conclus√£o de Teste", correct: false }
                ],
                feedbackCorrect: "Perfeito! Modelar (projetar) e implementar s√£o passos cruciais! üßë‚Äçüé®",
                feedbackIncorrect: "Quase! Pense em quem 'desenha' os testes e prepara o cen√°rio.",
                explanation: "A An√°lise e Modelagem (Design) de Teste envolvem a deriva√ß√£o de casos de teste a partir da base de teste e o planejamento de como esses testes ser√£o executados, incluindo a prepara√ß√£o de dados e ambiente. A Implementa√ß√£o foca em organizar e finalizar o testware."
            }
        ] 
      },
      { 
        id: "1.5", 
        title: "1.5 Habilidades essenciais e boas pr√°ticas em testes", 
        icon: "üí™", 
        locked: true, 
        completed: false, 
        slides: [
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Para ser um super Testador, precisamos de algumas habilidades! Curiosidade para explorar, aten√ß√£o aos detalhes para n√£o deixar nada escapar, pensamento cr√≠tico, e boa comunica√ß√£o para explicar os achados!"
            },
             {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Qual das seguintes habilidades N√ÉO √© considerada uma habilidade essencial gen√©rica para um testador?",
                options: [
                  { text: "Curiosidade", correct: false },
                  { text: "Habilidade avan√ßada de programa√ß√£o em 5 linguagens", correct: true },
                  { text: "Aten√ß√£o aos detalhes", correct: false },
                  { text: "Boas habilidades de comunica√ß√£o", correct: false }
                ],
                feedbackCorrect: "Correto! Embora conhecimento t√©cnico seja √∫til, ser um poliglota da programa√ß√£o n√£o √© o essencial para *todos* os testadores.",
                feedbackIncorrect: "Pense nas qualidades que ajudam a investigar e comunicar problemas.",
                explanation: "Habilidades como curiosidade, aten√ß√£o aos detalhes, pensamento cr√≠tico e boa comunica√ß√£o s√£o essenciais. Conhecimento t√©cnico √© valioso, mas a profundidade em m√∫ltiplas linguagens de programa√ß√£o n√£o √© uma exig√™ncia gen√©rica para todos os pap√©is de teste."
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "Uma boa pr√°tica √© a 'Abordagem de Equipe Completa' (Whole Team Approach). Nela, todos no time s√£o respons√°veis pela qualidade, n√£o s√≥ os testadores. √â um trabalho em equipe! ü§ù"
            },
            {
                type: 'content',
                character: 'professorBugsy',
                text: "E a independ√™ncia nos testes? Testadores independentes (de fora da equipe de desenvolvimento) podem ver coisas que os desenvolvedores n√£o veem, por terem uma perspectiva diferente. Mas isso pode criar dist√¢ncia. O ideal √© um equil√≠brio!"
            },
            {
                type: 'quiz',
                character: 'professorBugsy',
                question: "Qual √© um benef√≠cio da independ√™ncia nos testes?",
                options: [
                  { text: "Os testadores conhecem melhor o c√≥digo.", correct: false },
                  { text: "√â mais r√°pido, pois n√£o h√° comunica√ß√£o externa.", correct: false },
                  { text: "Testadores independentes podem ter uma perspectiva diferente e encontrar defeitos que outros n√£o veriam.", correct: true },
                  { text: "Garante que nenhum defeito passar√°.", correct: false }
                ],
                feedbackCorrect: "Exatamente! Um olhar 'de fora' pode ser muito valioso! üßê",
                feedbackIncorrect: "Pense na vantagem de ter algu√©m que n√£o participou da cria√ß√£o olhando o produto.",
                explanation: "Testadores independentes n√£o est√£o sujeitos aos mesmos vieses cognitivos dos desenvolvedores, o que pode ajud√°-los a identificar diferentes tipos de falhas e defeitos."
            }
        ] 
      },
    ]
  },
  {
    id: "ch2",
    title: "Cap√≠tulo 2: Testes ao longo do Ciclo de Vida",
    characterIcon: "üîÑ", 
    description: "Descubra como os testes se encaixam no desenvolvimento.",
    lessons: [
        {
            id: "2.1", 
            title: "2.1 Testes no contexto do Ciclo de Vida", 
            icon: "‚û°Ô∏è", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O jeito que um software √© feito (o Ciclo de Vida de Desenvolvimento de Software, ou SDLC) influencia muito como testamos! Seja um modelo Cascata (sequencial), Iterativo ou √Ågil, os testes se adaptam."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Em um modelo de desenvolvimento Sequencial (ex: Cascata), quando as atividades de teste din√¢mico s√£o mais intensas?",
                    options: [
                        { text: "Desde o in√≠cio, em paralelo com os requisitos.", correct: false },
                        { text: "Principalmente ap√≥s a fase de codifica√ß√£o estar completa ou quase completa.", correct: true },
                        { text: "Apenas ap√≥s o software ser entregue ao cliente.", correct: false },
                        { text: "Continuamente, em pequenas itera√ß√µes.", correct: false }
                    ],
                    feedbackCorrect: "Correto! No modelo cascata, uma fase termina para a outra come√ßar.",
                    feedbackIncorrect: "Pense na sequ√™ncia: requisitos, design, c√≥digo, DEPOIS teste.",
                    explanation: "Em modelos sequenciais como o Cascata, as atividades de teste din√¢mico (execu√ß√£o do software) geralmente ocorrem ap√≥s a conclus√£o da fase de desenvolvimento (codifica√ß√£o)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Boas pr√°ticas de teste valem para todos os SDLCs! Por exemplo, para cada atividade de desenvolvimento, deve haver uma atividade de teste correspondente. E come√ßar a analisar e modelar testes cedo (shift-left!) √© sempre uma boa!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "J√° ouviu falar em TDD (Desenvolvimento Orientado por Testes), ATDD (Desenvolvimento Orientado por Testes de Aceite) ou BDD (Desenvolvimento Orientado por Comportamento)? S√£o abordagens onde os testes s√£o criados *antes* do c√≥digo, guiando o desenvolvimento! √â como ter o mapa antes de come√ßar a jornada. üó∫Ô∏è"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual o princ√≠pio fundamental por tr√°s de TDD, ATDD e BDD?",
                    options: [
                        { text: "Escrever testes apenas ap√≥s o c√≥digo estar est√°vel.", correct: false },
                        { text: "Definir testes (ou especifica√ß√µes execut√°veis) antes de escrever o c√≥digo da funcionalidade.", correct: true },
                        { text: "Focar apenas em testes manuais para maior clareza.", correct: false },
                        { text: "Permitir que apenas desenvolvedores escrevam testes.", correct: false }
                    ],
                    feedbackCorrect: "Exatamente! Os testes guiam o caminho do desenvolvimento!",
                    feedbackIncorrect: "Pense: o que vem primeiro nessas abordagens, o teste ou o c√≥digo?",
                    explanation: "TDD, ATDD e BDD s√£o abordagens que promovem a escrita de testes (ou especifica√ß√µes na forma de testes) antes da implementa√ß√£o do c√≥digo da funcionalidade, servindo como guia e crit√©rio de conclus√£o para o desenvolvimento."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E o DevOps? √â uma cultura de colabora√ß√£o entre Desenvolvimento (Dev) e Opera√ß√µes (Ops), com muita automa√ß√£o (CI/CD - Integra√ß√£o/Entrega Cont√≠nua). Isso agiliza a entrega de software de qualidade, e os testes s√£o parte essencial desse fluxo r√°pido!"
                },
                 {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Shift-left √© a pr√°tica de mover as atividades de teste para o mais cedo poss√≠vel no ciclo de vida. Quanto antes um defeito √© encontrado, mais f√°cil e barato √© corrigi-lo! üï∞Ô∏è‚û°Ô∏èüí∞"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "As retrospectivas s√£o reuni√µes importantes ao final de um projeto ou itera√ß√£o para discutir o que foi bom, o que pode melhorar e como aplicar essas melhorias. √â aprender e evoluir sempre!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "O que significa a abordagem 'shift-left' em testes?",
                    options: [
                        { text: "Testar apenas no final do projeto.", correct: false },
                        { text: "Come√ßar as atividades de teste o mais cedo poss√≠vel no ciclo de vida.", correct: true },
                        { text: "Deixar os testes para a equipe de opera√ß√µes.", correct: false },
                        { text: "Usar apenas ferramentas de teste da esquerda para a direita.", correct: false }
                    ],
                    feedbackCorrect: "Corret√≠ssimo! Antecipar os testes √© uma grande economia! ‚è≥",
                    feedbackIncorrect: "Lembre-se do ditado: 'tempo √© dinheiro', especialmente em software!",
                    explanation: "Shift-left √© a pr√°tica de iniciar as atividades de teste mais cedo no ciclo de desenvolvimento, em vez de esperar at√© que o desenvolvimento esteja conclu√≠do. Isso ajuda a encontrar defeitos mais cedo, tornando-os mais baratos de corrigir."
                }
            ]
        },
        {
            id: "2.2", 
            title: "2.2 N√≠veis de Teste e Tipos de Teste", 
            icon: "üìä", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Os testes acontecem em diferentes N√çVEIS! Como andares de um pr√©dio, cada um com seu foco. Temos: Teste de Componente (pequenas partes), Teste de Integra√ß√£o de Componentes (como as partes conversam), Teste de Sistema (o sistema todo), Teste de Integra√ß√£o de Sistemas (o sistema conversando com outros) e Teste de Aceite (o cliente est√° feliz?)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual n√≠vel de teste √© geralmente realizado por desenvolvedores em seu ambiente de desenvolvimento, focando em m√≥dulos ou unidades de c√≥digo isoladas?",
                    options: [
                        { text: "Teste de Sistema", correct: false },
                        { text: "Teste de Componente (ou Teste de Unidade)", correct: true },
                        { text: "Teste de Aceite", correct: false },
                        { text: "Teste de Integra√ß√£o de Sistemas", correct: false }
                    ],
                    feedbackCorrect: "Isso mesmo! Testar os 'tijolinhos' do software!",
                    feedbackIncorrect: "Pense no menor n√≠vel, onde as pe√ßas individuais s√£o verificadas.",
                    explanation: "O Teste de Componente (tamb√©m conhecido como Teste de Unidade) foca em testar componentes de software isoladamente e √© frequentemente realizado por desenvolvedores."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Teste de Componente √© como testar cada pe√ßa de um Lego. Teste de Integra√ß√£o √© ver se as pe√ßas de Lego se encaixam. Teste de Sistema √© checar o castelo de Lego montado. E Teste de Aceite √© ver se quem pediu o castelo gostou dele! üòâ"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Al√©m dos n√≠veis, temos TIPOS de Teste! Teste Funcional: 'O que o software FAZ?'. Teste N√£o Funcional: 'Qu√£o BEM ele faz?' (performance, usabilidade, seguran√ßa...). Teste Caixa-Branca: 'Olhamos o c√≥digo por dentro!'. Teste Caixa-Preta: 'S√≥ vemos por fora, como um usu√°rio'."
                },
                 {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Testar a velocidade de resposta de um site sob carga √© um exemplo de qual tipo de teste?",
                    options: [
                        { text: "Teste Funcional", correct: false },
                        { text: "Teste N√£o Funcional (Efici√™ncia de Performance)", correct: true },
                        { text: "Teste Caixa-Branca", correct: false },
                        { text: "Teste de Componente", correct: false }
                    ],
                    feedbackCorrect: "Correto! Performance √© um aspecto crucial de 'qu√£o bem' o sistema funciona!",
                    feedbackIncorrect: "Pense se isso se refere ao 'o qu√™' o sistema faz ou 'como' ele faz.",
                    explanation: "Testar a velocidade de resposta sob carga √© um exemplo de Teste N√£o Funcional, especificamente relacionado √† caracter√≠stica de qualidade 'Efici√™ncia de Performance'."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "A ISO 25010 nos d√° uma lista de caracter√≠sticas de qualidade para o Teste N√£o Funcional, como Efici√™ncia de Performance, Compatibilidade, Usabilidade, Confiabilidade, Seguran√ßa, Manutenibilidade e Portabilidade. Ufa! üòÖ"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E n√£o podemos esquecer do Teste de Confirma√ß√£o (re-teste: o bug foi corrigido?) e do Teste de Regress√£o (a corre√ß√£o ou nova funcionalidade quebrou algo que j√° funcionava?). S√£o super importantes!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Ap√≥s uma corre√ß√£o de defeito, qual tipo de teste √© realizado para garantir que a corre√ß√£o funcionou e o defeito original foi resolvido?",
                    options: [
                        { text: "Teste de Regress√£o", correct: false },
                        { text: "Teste de Confirma√ß√£o (Re-teste)", correct: true },
                        { text: "Teste de Performance", correct: false },
                        { text: "Teste de Usabilidade", correct: false }
                    ],
                    feedbackCorrect: "Exatamente! Confirmar se o 'conserto' deu certo!",
                    feedbackIncorrect: "Pense: o que voc√™ faz para *confirmar* que um problema foi resolvido?",
                    explanation: "O Teste de Confirma√ß√£o (ou Re-teste) √© realizado para verificar se um defeito que foi reportado e corrigido realmente foi resolvido."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual n√≠vel de teste foca em verificar se as unidades de software interagem corretamente entre si?",
                    options: [
                        { text: "Teste de Componente", correct: false },
                        { text: "Teste de Integra√ß√£o", correct: true },
                        { text: "Teste de Sistema", correct: false },
                        { text: "Teste de Aceite", correct: false }
                    ],
                    feedbackCorrect: "Isso mesmo! A integra√ß√£o √© sobre a comunica√ß√£o entre as partes! üîó",
                    feedbackIncorrect: "Pense em como as pe√ßas se conectam, n√£o nas pe√ßas sozinhas ou no todo.",
                    explanation: "O Teste de Integra√ß√£o foca em verificar as interfaces e intera√ß√µes entre componentes ou sistemas integrados."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Verificar se o software √© f√°cil de usar e entender √© um exemplo de qual tipo de teste?",
                    options: [
                        { text: "Teste Funcional", correct: false },
                        { text: "Teste N√£o Funcional (Usabilidade)", correct: true },
                        { text: "Teste Caixa-Branca", correct: false },
                        { text: "Teste de Regress√£o", correct: false }
                    ],
                    feedbackCorrect: "Correto! Usabilidade √© chave para um software amig√°vel! üòä",
                    feedbackIncorrect: "Lembre-se, funcional √© 'o qu√™', n√£o funcional √© 'qu√£o bem'.",
                    explanation: "A usabilidade √© uma caracter√≠stica de qualidade n√£o funcional que avalia a facilidade com que os usu√°rios podem aprender, usar e se satisfazer com um software."
                }
            ]
        },
        {
            id: "2.3", 
            title: "2.3 Teste de Manuten√ß√£o", 
            icon: "üîß", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Mesmo depois de lan√ßado, o software continua precisando de cuidados! Isso √© o Teste de Manuten√ß√£o. Ele acontece quando corrigimos algo, adaptamos para um novo ambiente (ex: novo celular) ou melhoramos o sistema."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Os gatilhos para o teste de manuten√ß√£o podem ser: modifica√ß√µes (corre√ß√µes ou melhorias), migra√ß√µes (mudan√ßa de plataforma) ou at√© a aposentadoria do sistema (precisamos garantir que os dados sejam arquivados corretamente!)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Mudar um software para rodar em um novo sistema operacional exigiria qual tipo de teste de manuten√ß√£o?",
                    options: [
                      { text: "Corre√ß√£o de defeitos urgentes (hotfix).", correct: false },
                      { text: "Adapta√ß√£o devido a migra√ß√£o de ambiente.", correct: true },
                      { text: "Melhoria de performance planejada.", correct: false },
                      { text: "Aposentadoria do sistema.", correct: false }
                    ],
                    feedbackCorrect: "Exatamente! O software precisa se adaptar ao novo 'lar'!",
                    feedbackIncorrect: "Pense na raz√£o da mudan√ßa: foi um bug, uma melhoria ou uma necessidade de adapta√ß√£o?",
                    explanation: "A migra√ß√£o de um software para um novo ambiente operacional (como um novo sistema operacional) √© um gatilho para testes de manuten√ß√£o focados na adapta√ß√£o e verifica√ß√£o da compatibilidade e funcionalidade no novo ambiente."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O tamanho do teste de manuten√ß√£o depende do risco da mudan√ßa, do tamanho do sistema e do tamanho da pr√≥pria mudan√ßa. Uma pequena corre√ß√£o pode precisar de menos teste que uma grande atualiza√ß√£o! Uma boa An√°lise de Impacto nos ajuda a decidir o que testar."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual dos seguintes N√ÉO √© um gatilho t√≠pico para Teste de Manuten√ß√£o?",
                    options: [
                        { text: "Corre√ß√£o de um defeito encontrado em produ√ß√£o.", correct: false },
                        { text: "Desenvolvimento inicial de uma nova funcionalidade.", correct: true },
                        { text: "Migra√ß√£o do software para um novo sistema operacional.", correct: false },
                        { text: "Melhoria planejada na performance do sistema.", correct: false }
                    ],
                    feedbackCorrect: "Exato! O desenvolvimento inicial √© sobre criar, n√£o manter! üòâ",
                    feedbackIncorrect: "Pense no que acontece *depois* que o software j√° est√° 'vivo'.",
                    explanation: "O Teste de Manuten√ß√£o ocorre em um sistema j√° existente. O desenvolvimento inicial de uma nova funcionalidade faz parte do desenvolvimento do produto, n√£o da manuten√ß√£o."
                }
            ]
        },
    ]
  },
  {
    id: "ch3",
    title: "Cap√≠tulo 3: Teste Est√°tico",
    characterIcon: "üìÑ", 
    description: "Explore testes sem executar o c√≥digo.",
    lessons: [
        {
            id: "3.1", 
            title: "3.1 No√ß√µes b√°sicas de Teste Est√°tico", 
            icon: "üßê", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Teste Est√°tico √© como revisar um livro antes de publicar! üìñ N√£o executamos o c√≥digo, mas examinamos documentos, modelos ou o pr√≥prio c√≥digo para encontrar problemas. √â uma forma poderosa de achar defeitos cedo!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Podemos examinar requisitos, hist√≥rias de usu√°rios, especifica√ß√µes de arquitetura, c√≥digo-fonte, planos de teste... quase qualquer produto de trabalho! O objetivo √© melhorar a qualidade e achar defeitos."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual dos seguintes artefatos N√ÉO seria tipicamente examinado durante o teste est√°tico?",
                    options: [
                      { text: "Especifica√ß√£o de Requisitos", correct: false },
                      { text: "C√≥digo-fonte", correct: false },
                      { text: "O software em execu√ß√£o no ambiente de produ√ß√£o", correct: true },
                      { text: "Planos de teste", correct: false }
                    ],
                    feedbackCorrect: "Correto! Teste est√°tico √© sobre examinar 'papel' ou c√≥digo, n√£o o software rodando.",
                    feedbackIncorrect: "Lembre-se, 'est√°tico' significa que n√£o h√° execu√ß√£o.",
                    explanation: "O teste est√°tico envolve a an√°lise de produtos de trabalho sem execut√°-los. O software em execu√ß√£o no ambiente de produ√ß√£o seria avaliado por testes din√¢micos ou monitoramento."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O valor do teste est√°tico √© imenso! Ele pode encontrar defeitos que o teste din√¢mico (executando o c√≥digo) n√£o pegaria, como c√≥digo inalcan√ß√°vel ou desvios de padr√µes de codifica√ß√£o. E, claro, quanto antes achamos, mais barato √© corrigir!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Ferramentas de an√°lise est√°tica podem nos ajudar a verificar automaticamente regras de codifica√ß√£o, complexidade do c√≥digo e at√© potenciais vulnerabilidades de seguran√ßa, sem rodar nada! ü§ñ"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual das seguintes √© uma caracter√≠stica do Teste Est√°tico?",
                    options: [
                        { text: "Requer a execu√ß√£o do software em um ambiente de teste.", correct: false },
                        { text: "Envolve a avalia√ß√£o de produtos de trabalho sem executar o c√≥digo.", correct: true },
                        { text: "√â usado principalmente para medir a performance do sistema.", correct: false },
                        { text: "S√≥ pode ser feito por desenvolvedores.", correct: false }
                    ],
                    feedbackCorrect: "Corret√≠ssimo! √â a arte de encontrar problemas s√≥ olhando! üïµÔ∏è‚Äç‚ôÄÔ∏è",
                    feedbackIncorrect: "Lembre-se, 'est√°tico' significa que o software n√£o est√° 'em movimento'.",
                    explanation: "O Teste Est√°tico examina produtos de trabalho (documentos, c√≥digo) sem a necessidade de executar o software. Seu foco √© encontrar defeitos e melhorar a qualidade preventivamente."
                }
            ]
        },
        {
            id: "3.2", 
            title: "3.2 Processo de feedback e revis√£o", 
            icon: "üó£Ô∏è", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Dar e receber feedback cedo e com frequ√™ncia √© vital! Isso ajuda a alinhar as expectativas e a garantir que todos entendam os requisitos da mesma forma. Uma revis√£o bem feita √© uma forma de feedback estruturado."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Um processo de revis√£o formal (como o da ISO/IEC 20246) tem atividades chave: Planejamento (definir o qu√™ e como revisar), In√≠cio (preparar todos), Revis√£o Individual (cada um analisa), Comunica√ß√£o e An√°lise de Problemas (discutir achados) e Corre√ß√£o e Relat√≥rio (resolver e documentar)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Na atividade 'Revis√£o Individual' de um processo de revis√£o, o que os revisores fazem?",
                    options: [
                      { text: "Corrigem os defeitos encontrados no documento.", correct: false },
                      { text: "Discutem em grupo os problemas identificados.", correct: false },
                      { text: "Analisam o produto de trabalho para identificar anomalias e fazer recomenda√ß√µes.", correct: true },
                      { text: "Decidem se o produto de trabalho atende aos crit√©rios de sa√≠da.", correct: false }
                    ],
                    feedbackCorrect: "Exato! √â o momento de cada um fazer sua 'li√ß√£o de casa' investigativa.",
                    feedbackIncorrect: "Pense no que cada revisor faz sozinho antes da reuni√£o.",
                    explanation: "Durante a Revis√£o Individual, cada revisor examina o produto de trabalho de forma independente para identificar poss√≠veis anomalias, fazer perguntas e sugerir melhorias, registrando seus achados."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Em uma revis√£o, temos pap√©is importantes: Gerente (decide o que revisar), Autor (criador do item), Moderador (lidera a reuni√£o), Revisor (analisa e encontra problemas), Relator (anota tudo) e L√≠der da Revis√£o (respons√°vel geral)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Existem diferentes tipos de revis√£o, da mais informal √† mais formal: Revis√£o Informal (um bate-papo), Walkthrough (apresenta√ß√£o pelo autor), Revis√£o T√©cnica (discuss√£o t√©cnica) e Inspe√ß√£o (a mais rigorosa, com m√©tricas e tudo!)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Para uma revis√£o ser um sucesso: objetivos claros, tipo certo de revis√£o, revisar em partes pequenas, feedback construtivo, tempo para prepara√ß√£o, apoio da ger√™ncia e uma cultura de aprendizado!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual tipo de revis√£o √© considerado o mais formal e rigoroso, seguindo um processo definido e coletando m√©tricas?",
                    options: [
                        { text: "Revis√£o Informal", correct: false },
                        { text: "Walkthrough", correct: false },
                        { text: "Revis√£o T√©cnica", correct: false },
                        { text: "Inspe√ß√£o", correct: true }
                    ],
                    feedbackCorrect: "Excelente! A Inspe√ß√£o √© o 'detetive' das revis√µes! üïµÔ∏è‚Äç‚ôÇÔ∏è",
                    feedbackIncorrect: "Pense no tipo de revis√£o que seria usado para algo muito cr√≠tico e que precisa de muita formalidade.",
                    explanation: "A Inspe√ß√£o √© o tipo mais formal de revis√£o, seguindo um processo definido, com pap√©is espec√≠ficos, e focada na detec√ß√£o m√°xima de anomalias, geralmente com coleta de m√©tricas para aprimoramento do processo."
                }
            ]
        },
    ]
  },
  {
    id: "ch4",
    title: "Cap√≠tulo 4: An√°lise e Modelagem de Teste",
    characterIcon: "üß©", 
    description: "Domine as t√©cnicas para criar testes eficazes.",
    lessons: [
        {
            id: "4.1", 
            title: "4.1 Vis√£o geral das t√©cnicas de teste", 
            icon: "üó∫Ô∏è", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "As t√©cnicas de teste s√£o nossas ferramentas secretas para criar casos de teste eficazes! üõ†Ô∏è Elas nos ajudam a decidir O QUE testar e COMO testar de forma sistem√°tica."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Temos tr√™s grandes fam√≠lias de t√©cnicas: Caixa-Preta (foco no comportamento externo, sem ver o c√≥digo), Caixa-Branca (foco na estrutura interna, olhando o c√≥digo) e Baseadas na Experi√™ncia (usando nosso conhecimento e intui√ß√£o)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Uma t√©cnica de teste que se baseia em requisitos e especifica√ß√µes, sem olhar o c√≥digo interno, pertence a qual categoria?",
                    options: [
                        { text: "Caixa-Branca", correct: false },
                        { text: "Caixa-Preta", correct: true },
                        { text: "Baseada na Experi√™ncia", correct: false }
                    ],
                    feedbackCorrect: "Correto! A caixa-preta v√™ o software como um usu√°rio! ‚¨õ",
                    feedbackIncorrect: "Pense em uma caixa que voc√™ n√£o pode ver por dentro...",
                    explanation: "T√©cnicas de teste caixa-preta (ou baseadas em especifica√ß√£o) derivam testes do comportamento externo do sistema, como definido em requisitos, sem conhecimento da estrutura interna."
                }
            ]
        },
        {
            id: "4.2", 
            title: "4.2 T√©cnicas de Teste Caixa-Preta", 
            icon: "‚¨õ", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Vamos mergulhar nas t√©cnicas Caixa-Preta! A primeira √© o Particionamento de Equival√™ncia (EP). Dividimos as entradas em grupos (parti√ß√µes) onde esperamos que o sistema se comporte da mesma forma. Testamos um valor de cada parti√ß√£o!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "No Particionamento de Equival√™ncia, se uma parti√ß√£o representa 'idades v√°lidas de 18 a 65', qual seria um exemplo de valor de teste para esta parti√ß√£o?",
                    options: [
                      { text: "17", correct: false },
                      { text: "30", correct: true },
                      { text: "66", correct: false },
                      { text: "Qualquer idade", correct: false }
                    ],
                    feedbackCorrect: "Exato! 30 est√° dentro da parti√ß√£o v√°lida.",
                    feedbackIncorrect: "Escolha um valor que se encaixe no grupo de idades v√°lidas (18-65).",
                    explanation: "O Particionamento de Equival√™ncia (EP) divide os dados em parti√ß√µes. Para a parti√ß√£o 'idades v√°lidas de 18 a 65', qualquer valor dentro desse intervalo (ex: 30) pode ser usado para representar a parti√ß√£o."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Depois temos a An√°lise de Valor Limite (BVA). Os erros adoram se esconder nas fronteiras das parti√ß√µes! üêõ Com BVA, testamos os valores nos limites e logo ao lado deles. Pode ser com 2 valores (o limite e o vizinho) ou 3 valores (o limite e os dois vizinhos)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Se um campo aceita n√∫meros de 1 a 100, quais valores seriam tipicamente testados usando BVA de 3 valores para o limite inferior (1)?",
                    options: [
                        { text: "0, 1, 2", correct: true },
                        { text: "1, 2, 3", correct: false },
                        { text: "1, 50, 100", correct: false },
                        { text: "Apenas 1", correct: false }
                    ],
                    feedbackCorrect: "Perfeito! Os vizinhos do limite s√£o important√≠ssimos! üëå",
                    feedbackIncorrect: "Lembre-se, BVA de 3 valores pega o limite e seus dois vizinhos imediatos.",
                    explanation: "Para BVA de 3 valores, em um limite inferior como '1' (onde '0' seria inv√°lido e '2' v√°lido), testamos o valor antes do limite (0), o pr√≥prio limite (1), e o valor ap√≥s o limite (2)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Para regras de neg√≥cio complexas, usamos o Teste de Tabela de Decis√£o! Listamos as condi√ß√µes e as a√ß√µes, e criamos colunas (regras) para cada combina√ß√£o. Super √∫til para desembara√ßar l√≥gicas complicadas!"
                },
                 {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Quando o Teste de Tabela de Decis√£o √© particularmente √∫til?",
                    options: [
                      { text: "Para testar interfaces de usu√°rio simples.", correct: false },
                      { text: "Quando h√° muitas combina√ß√µes de condi√ß√µes que resultam em diferentes a√ß√µes.", correct: true },
                      { text: "Para medir a performance do sistema.", correct: false },
                      { text: "Para verificar a estrutura interna do c√≥digo.", correct: false }
                    ],
                    feedbackCorrect: "Correto! Tabelas de decis√£o ajudam a organizar o caos l√≥gico!",
                    feedbackIncorrect: "Pense em situa√ß√µes com muitas 'se' e 'ent√£o'.",
                    explanation: "O Teste de Tabela de Decis√£o √© muito eficaz para testar sistemas com l√≥gica de neg√≥cio complexa, onde m√∫ltiplas condi√ß√µes combinadas determinam as a√ß√µes a serem tomadas."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E o Teste de Transi√ß√£o de Estado? Ele modela como o sistema muda de um estado para outro (ex: pedido 'Pendente' -> 'Aprovado' -> 'Enviado'). Testamos as transi√ß√µes v√°lidas e, √†s vezes, as inv√°lidas."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual t√©cnica caixa-preta √© mais adequada para testar o comportamento de um sistema que passa por diferentes fases ou modos?",
                    options: [
                      { text: "Particionamento de Equival√™ncia", correct: false },
                      { text: "An√°lise de Valor Limite", correct: false },
                      { text: "Teste de Tabela de Decis√£o", correct: false },
                      { text: "Teste de Transi√ß√£o de Estado", correct: true }
                    ],
                    feedbackCorrect: "Isso mesmo! Estados e transi√ß√µes s√£o o foco dela! üöÇ",
                    feedbackIncorrect: "Pense em algo que muda de 'humor' ou 'status'.",
                    explanation: "O Teste de Transi√ß√£o de Estado √© ideal para sistemas cujo comportamento depende de seu estado atual e dos eventos que causam transi√ß√µes para outros estados."
                  }
            ]
        },
        {
            id: "4.3", 
            title: "4.3 T√©cnicas de Teste Caixa-Branca", 
            icon: "‚¨ú", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Agora, vamos espiar dentro da caixa com as t√©cnicas Caixa-Branca! Aqui olhamos a estrutura interna do c√≥digo. O Teste de Instru√ß√£o busca executar cada linha de c√≥digo execut√°vel pelo menos uma vez."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "A Cobertura de Instru√ß√£o mede quantas linhas foram executadas. 100% de cobertura de instru√ß√£o √© bom, mas n√£o garante que todos os caminhos de decis√£o foram testados!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "O que a Cobertura de Instru√ß√£o mede?",
                    options: [
                      { text: "Quantas funcionalidades foram testadas.", correct: false },
                      { text: "A porcentagem de instru√ß√µes execut√°veis do c√≥digo que foram exercitadas pelos testes.", correct: true },
                      { text: "Quantos defeitos foram encontrados por linha de c√≥digo.", correct: false },
                      { text: "A performance do c√≥digo durante a execu√ß√£o.", correct: false }
                    ],
                    feedbackCorrect: "Exato! Medimos quantas 'frases' do c√≥digo foram lidas!",
                    feedbackIncorrect: "Lembre-se, √© sobre as *instru√ß√µes* do c√≥digo.",
                    explanation: "A Cobertura de Instru√ß√£o mede a propor√ß√£o de instru√ß√µes execut√°veis no c√≥digo que foram exercitadas por um conjunto de testes, expressa como uma porcentagem."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Para isso, temos o Teste de Ramifica√ß√£o (ou Desvio)! Ele foca em executar cada poss√≠vel resultado de uma decis√£o no c√≥digo (o 'sim' e o 'n√£o' de um 'if', por exemplo). 100% de cobertura de ramifica√ß√£o √© mais forte e inclui 100% de instru√ß√£o!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O valor do teste caixa-branca √© encontrar defeitos na l√≥gica interna que testes caixa-preta poderiam n√£o achar, como um c√°lculo errado escondido em uma condi√ß√£o espec√≠fica."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Se um teste atinge 100% de Cobertura de Ramifica√ß√£o, ele tamb√©m garante 100% de Cobertura de Instru√ß√£o?",
                    options: [
                        { text: "Sim, sempre.", correct: true },
                        { text: "N√£o, nunca.", correct: false },
                        { text: "Apenas se n√£o houver 'loops' no c√≥digo.", correct: false },
                        { text: "Apenas se n√£o houver instru√ß√µes 'else'.", correct: false }
                    ],
                    feedbackCorrect: "Corret√≠ssimo! Cobrir todas as ramifica√ß√µes significa passar por todas as instru√ß√µes! üõ§Ô∏è",
                    feedbackIncorrect: "Pense bem: para testar um 'if' e um 'else', voc√™ precisa executar as instru√ß√µes dentro de ambos.",
                    explanation: "100% de cobertura de ramifica√ß√£o implica que todas as poss√≠veis sa√≠das de todas as decis√µes foram tomadas, o que, por sua vez, significa que todas as instru√ß√µes execut√°veis nessas ramifica√ß√µes foram executadas. Portanto, 100% de cobertura de ramifica√ß√£o inclui 100% de cobertura de instru√ß√£o."
                }
            ]
        },
        {
            id: "4.4", 
            title: "4.4 T√©cnicas de Teste Baseadas na Experi√™ncia", 
            icon: "üß†", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "As t√©cnicas baseadas na experi√™ncia usam o conhecimento, intui√ß√£o e 'faro' do testador! üïµÔ∏è A Suposi√ß√£o de Erro √© quando prevemos onde os erros podem estar, com base em experi√™ncias passadas ou tipos comuns de bugs."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "A t√©cnica 'Suposi√ß√£o de Erro' baseia-se principalmente em qu√™?",
                    options: [
                      { text: "Especifica√ß√µes formais detalhadas.", correct: false },
                      { text: "Conhecimento e experi√™ncia do testador sobre tipos comuns de defeitos.", correct: true },
                      { text: "Cobertura estrutural do c√≥digo.", correct: false },
                      { text: "Modelos de transi√ß√£o de estado.", correct: false }
                    ],
                    feedbackCorrect: "Correto! √â a intui√ß√£o afiada do testador em a√ß√£o!",
                    feedbackIncorrect: "Pense: o que guia essa 'suposi√ß√£o'?",
                    explanation: "A Suposi√ß√£o de Erro (Error Guessing) √© uma t√©cnica de teste baseada na experi√™ncia onde o testador usa seu conhecimento, intui√ß√£o e experi√™ncia sobre onde os defeitos tendem a ocorrer para projetar casos de teste."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O Teste Explorat√≥rio √© uma aventura! Aprendemos sobre o software, modelamos testes e os executamos, tudo ao mesmo tempo. √â √≥timo quando as especifica√ß√µes s√£o poucas ou o tempo √© curto. Muitas vezes usamos 'testes baseados em sess√£o' para organizar."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E os Testes baseados em Lista de Verifica√ß√£o (Checklist)? Criamos uma lista de itens a serem verificados. Ajuda a garantir consist√™ncia e a n√£o esquecer de nada importante. As listas devem ser atualizadas com o tempo!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual t√©cnica √© caracterizada pelo aprendizado, modelagem e execu√ß√£o de testes de forma simult√¢nea e din√¢mica?",
                    options: [
                        { text: "Suposi√ß√£o de Erro", correct: false },
                        { text: "Testes Explorat√≥rios", correct: true },
                        { text: "Testes baseados em Lista de Verifica√ß√£o", correct: false },
                        { text: "Teste de Tabela de Decis√£o", correct: false }
                    ],
                    feedbackCorrect: "Isso a√≠! Explorar √© descobrir na hora! üß≠",
                    feedbackIncorrect: "Pense em qual t√©cnica se parece mais com uma 'explora√ß√£o' livre.",
                    explanation: "O Teste Explorat√≥rio envolve o testador aprendendo sobre o sistema, projetando e executando testes e interpretando os resultados simultaneamente. √â uma abordagem muito din√¢mica e adaptativa."
                }
            ]
        },
        {
            id: "4.5", 
            title: "4.5 Abordagens de Teste Baseadas na Colabora√ß√£o", 
            icon: "ü§ù", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "A colabora√ß√£o √© superpoderosa nos testes! A escrita colaborativa de Hist√≥rias de Usu√°rios usa os 3Cs: Cart√£o (onde a hist√≥ria √© escrita), Conversa√ß√£o (discuss√£o sobre ela) e Confirma√ß√£o (Crit√©rios de Aceite)."
                },
                 {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Nos '3Cs' da escrita colaborativa de Hist√≥rias de Usu√°rios, o que representa a 'Conversa√ß√£o'?",
                    options: [
                      { text: "Onde a hist√≥ria √© fisicamente escrita (ex: um post-it).", correct: false },
                      { text: "As discuss√µes e esclarecimentos sobre a hist√≥ria entre a equipe e stakeholders.", correct: true },
                      { text: "Os testes automatizados para a hist√≥ria.", correct: false },
                      { text: "A aprova√ß√£o final da hist√≥ria pelo cliente.", correct: false }
                    ],
                    feedbackCorrect: "Exato! A conversa √© onde o entendimento compartilhado √© constru√≠do!",
                    feedbackIncorrect: "Pense no di√°logo e na troca de ideias sobre a hist√≥ria.",
                    explanation: "Na abordagem dos 3Cs para Hist√≥rias de Usu√°rios, 'Conversa√ß√£o' refere-se ao di√°logo cont√≠nuo entre a equipe de desenvolvimento e os stakeholders para refinar o entendimento da hist√≥ria e seus detalhes."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Crit√©rios de Aceite s√£o as condi√ß√µes que a hist√≥ria deve atender para ser considerada 'pronta'. Podem ser escritos como cen√°rios (Dado/Quando/Ent√£o - Gherkin) ou listas de regras. Eles s√£o a base para os testes de aceite!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O Desenvolvimento Orientado por Teste de Aceite (ATDD) √© uma abordagem onde o time (clientes, desenvolvedores, testadores) cria os testes de aceite *antes* da implementa√ß√£o. Isso garante que todos entendam o que precisa ser feito!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "No ATDD, quando os casos de teste de aceite s√£o tipicamente criados?",
                    options: [
                        { text: "Depois que a codifica√ß√£o da hist√≥ria de usu√°rio est√° completa.", correct: false },
                        { text: "Durante a execu√ß√£o dos testes de sistema.", correct: false },
                        { text: "Antes da implementa√ß√£o da hist√≥ria de usu√°rio, em colabora√ß√£o.", correct: true },
                        { text: "Apenas pelo cliente, no final do projeto.", correct: false }
                    ],
                    feedbackCorrect: "Correto! No ATDD, os testes v√™m primeiro para guiar! üìú",
                    feedbackIncorrect: "Lembre-se que o 'A' em ATDD √© de 'Acceptance Test' (Teste de Aceite) e o 'D' √© de 'Driven' (Orientado).",
                    explanation: "No Desenvolvimento Orientado por Teste de Aceite (ATDD), os testes de aceite s√£o criados colaborativamente pela equipe (incluindo representantes do neg√≥cio, desenvolvedores e testadores) *antes* que a funcionalidade correspondente seja implementada. Esses testes ajudam a definir e esclarecer o comportamento esperado."
                }
            ]
        },
    ]
  },
  {
    id: "ch5",
    title: "Cap√≠tulo 5: Gerenciamento das Atividades de Teste",
    characterIcon: "üìã", 
    description: "Organize e controle o processo de teste.",
    lessons: [
        {
            id: "5.1", 
            title: "5.1 Planejamento de Teste", 
            icon: "üìù", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Planejar os testes √© como tra√ßar a rota de uma grande aventura! üó∫Ô∏è Um Plano de Teste descreve os objetivos, recursos, cronograma e processos que usaremos."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O que tem num Plano de Teste? Contexto, escopo, abordagem de teste, crit√©rios de entrada e sa√≠da, riscos, cronograma, responsabilidades... ufa, bastante coisa!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual dos seguintes itens N√ÉO √© tipicamente inclu√≠do em um Plano de Teste?",
                    options: [
                        { text: "Escopo dos testes", correct: false },
                        { text: "Resultados detalhados de cada caso de teste executado", correct: true },
                        { text: "Cronograma das atividades de teste", correct: false },
                        { text: "Recursos necess√°rios para o teste", correct: false }
                    ],
                    feedbackCorrect: "Isso mesmo! Os resultados v√™m depois, nos relat√≥rios de execu√ß√£o! üìÑ",
                    feedbackIncorrect: "Pense no plano como o 'antes' da execu√ß√£o.",
                    explanation: "Um Plano de Teste foca no planejamento e estrat√©gia (escopo, cronograma, recursos, abordagem, etc.). Os resultados detalhados da execu√ß√£o dos casos de teste s√£o documentados em relat√≥rios de progresso ou conclus√£o de teste."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Crit√©rios de Entrada definem quando podemos come√ßar uma atividade (ex: ambiente pronto). Crit√©rios de Sa√≠da definem quando ela est√° conclu√≠da (ex: 95% de cobertura). Em m√©todos √°geis, usamos Defini√ß√£o de Pronto (DoR) e Defini√ß√£o de Feito (DoD)."
                },
                 {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Em contextos √°geis, 'Defini√ß√£o de Feito' (DoD) se refere a qu√™?",
                    options: [
                      { text: "Os crit√©rios que uma hist√≥ria de usu√°rio deve atender para ser iniciada.", correct: false },
                      { text: "Os crit√©rios que uma hist√≥ria de usu√°rio ou incremento deve atender para ser considerado completo e potencialmente entreg√°vel.", correct: true },
                      { text: "O plano de teste para a sprint.", correct: false },
                      { text: "A lista de defeitos encontrados na itera√ß√£o.", correct: false }
                    ],
                    feedbackCorrect: "Exato! DoD √© o checklist para dizer 'Terminamos de verdade!'",
                    feedbackIncorrect: "Pense: o que significa 'Feito' para a equipe?",
                    explanation: "A Defini√ß√£o de Feito (Definition of Done - DoD) √© um conjunto de crit√©rios acordados pela equipe que uma hist√≥ria de usu√°rio ou um incremento de produto deve atender para ser considerado completo e pronto para ser entregue ou liberado."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Estimar o esfor√ßo de teste √© um desafio! Podemos usar t√©cnicas baseadas em m√©tricas (dados de projetos passados), ou baseadas em especialistas (como Wideband Delphi ou Planning Poker)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E como priorizar os casos de teste? Podemos focar nos riscos mais altos, na cobertura mais importante ou nos requisitos mais cr√≠ticos para o neg√≥cio."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "A Pir√¢mide de Teste nos ajuda a visualizar a propor√ß√£o de diferentes tipos de testes automatizados (muitos testes de unidade, menos de servi√ßo, e ainda menos de UI). J√° os Quadrantes de Teste nos ajudam a pensar sobre quais tipos de teste fazer, considerando se s√£o orientados ao neg√≥cio ou √† tecnologia, e se apoiam a equipe ou criticam o produto."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual t√©cnica de estimativa de esfor√ßo envolve a coleta de estimativas de v√°rios especialistas de forma iterativa at√© que um consenso seja alcan√ßado?",
                    options: [
                        { text: "Estimativa baseada em √≠ndices (m√©tricas)", correct: false },
                        { text: "Wideband Delphi (ou Planning Poker)", correct: true },
                        { text: "Extrapola√ß√£o", correct: false },
                        { text: "An√°lise de Risco", correct: false }
                    ],
                    feedbackCorrect: "Correto! A sabedoria do grupo em a√ß√£o!",
                    feedbackIncorrect: "Pense em uma t√©cnica que busca o consenso de especialistas.",
                    explanation: "Wideband Delphi √© uma t√©cnica de estimativa baseada em consenso de especialistas, onde as estimativas s√£o coletadas anonimamente, discutidas e refinadas iterativamente at√© que o grupo chegue a um acordo. Planning Poker √© uma varia√ß√£o popular em contextos √°geis."
                }
            ]
        },
        {
            id: "5.2", 
            title: "5.2 Gerenciamento de Risco", 
            icon: "üé≤", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Risco √© uma poss√≠vel amea√ßa que pode causar um efeito adverso. üò¨ Ele tem dois amigos: a Probabilidade (chance de acontecer) e o Impacto (o estrago que faz se acontecer)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Temos Riscos de Projeto (atrasos, falta de pessoal, problemas com ferramentas) e Riscos de Produto (falhas no software, performance ruim, seguran√ßa fraca)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "A possibilidade de um testador chave ficar doente durante uma fase cr√≠tica do projeto √© um exemplo de qual tipo de risco?",
                    options: [
                      { text: "Risco de Produto (falha funcional)", correct: false },
                      { text: "Risco de Projeto (problema de pessoal)", correct: true },
                      { text: "Risco T√©cnico (ferramenta inadequada)", correct: false },
                      { text: "Risco de Fornecedor (atraso na entrega de componente)", correct: false }
                    ],
                    feedbackCorrect: "Exato! Isso afeta o andamento do projeto.",
                    feedbackIncorrect: "Pense se o problema afeta o 'como fazer' o projeto ou o 'o qu√™' o projeto entrega.",
                    explanation: "A indisponibilidade de pessoal chave (como um testador experiente) durante uma fase cr√≠tica √© um Risco de Projeto, pois pode impactar o cronograma, o or√ßamento e a capacidade de atingir os objetivos do projeto."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "A An√°lise de Risco do Produto nos ajuda a identificar e avaliar esses riscos, para focarmos os testes onde mais importa! Isso se chama Teste Baseado em Risco. üõ°Ô∏è"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E o Controle de Risco? √â tomar medidas para diminuir o risco (mitiga√ß√£o, como testar mais), monitor√°-lo, ou at√© decidir aceit√°-lo, transferi-lo ou ter um plano B (conting√™ncia)."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Um software de e-commerce que n√£o processa pagamentos corretamente representa principalmente um:",
                    options: [
                        { text: "Risco de Projeto (atraso na entrega)", correct: false },
                        { text: "Risco de Produto (funcionalidade incorreta)", correct: true },
                        { text: "Risco de Ferramenta (licen√ßa expirada)", correct: false },
                        { text: "Risco de Pessoal (testador doente)", correct: false }
                    ],
                    feedbackCorrect: "Exato! Isso afeta diretamente a qualidade e utilidade do produto! üõí",
                    feedbackIncorrect: "Pense se o problema √© com o 'fazer' o projeto ou com o 'resultado' do projeto.",
                    explanation: "Um problema na funcionalidade principal do software, como o processamento de pagamentos, √© um Risco de Produto, pois afeta diretamente a qualidade e a capacidade do software de atender aos objetivos de neg√≥cio."
                }
            ]
        },
        {
            id: "5.3", 
            title: "5.3 Monitoramento, Controle e Conclus√£o do Teste", 
            icon: "üìà", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Monitorar √© ficar de olho no progresso dos testes! Usamos m√©tricas para isso: progresso do projeto (tarefas conclu√≠das), progresso do teste (casos executados), qualidade do produto (defeitos encontrados), riscos, cobertura e custos."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "O n√∫mero de casos de teste executados em compara√ß√£o com o total planejado √© uma m√©trica de:",
                    options: [
                      { text: "Qualidade do Produto", correct: false },
                      { text: "Progresso do Teste", correct: true },
                      { text: "Custo do Teste", correct: false },
                      { text: "Risco Residual", correct: false }
                    ],
                    feedbackCorrect: "Correto! Ajuda a ver se estamos no caminho certo com a execu√ß√£o.",
                    feedbackIncorrect: "Pense: essa m√©trica mostra o 'quanto j√° fizemos' dos testes?",
                    explanation: "O n√∫mero de casos de teste executados em rela√ß√£o ao total planejado √© uma m√©trica de Progresso do Teste, indicando o avan√ßo das atividades de execu√ß√£o."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O Controle de Teste usa essas informa√ß√µes para tomar decis√µes: repriorizar testes, ajustar cronogramas, adicionar recursos, etc. √â manter o trem nos trilhos! üöÇ"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E a Conclus√£o do Teste? √â quando arquivamos tudo, aprendemos as li√ß√µes e preparamos um Relat√≥rio de Conclus√£o do Teste, resumindo tudo que aconteceu."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Os Relat√≥rios de Teste podem ser de Progresso (durante os testes) ou de Conclus√£o. Eles comunicam o status para diferentes p√∫blicos (gerentes, clientes, equipe), ent√£o o formato e a frequ√™ncia variam."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual das seguintes m√©tricas √© usada para avaliar a qualidade do produto diretamente?",
                    options: [
                        { text: "N√∫mero de casos de teste planejados.", correct: false },
                        { text: "Horas gastas em reuni√µes de planejamento.", correct: false },
                        { text: "Densidade de defeitos encontrados por funcionalidade.", correct: true },
                        { text: "Custo da ferramenta de automa√ß√£o.", correct: false }
                    ],
                    feedbackCorrect: "Corret√≠ssimo! A quantidade de defeitos nos diz muito sobre a sa√∫de do software! ‚ù§Ô∏è‚Äçü©π",
                    feedbackIncorrect: "Pense em qual m√©trica reflete diretamente os problemas no software.",
                    explanation: "A densidade de defeitos (n√∫mero de defeitos por tamanho ou complexidade de uma funcionalidade) √© uma m√©trica que ajuda a avaliar a qualidade do produto, indicando √°reas mais problem√°ticas."
                }
            ]
        },
        {
            id: "5.4", 
            title: "5.4 Gerenciamento de Configura√ß√£o (CM)", 
            icon: "‚öôÔ∏è", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "O Gerenciamento de Configura√ß√£o (CM) √© nosso organizador mestre! üìö Ele ajuda a identificar, controlar e rastrear todos os itens de teste (planos, casos, scripts, software em teste, ambiente...). Tudo tem sua vers√£o e seu lugar!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Com CM, criamos 'baselines' (vers√µes est√°veis e aprovadas). Se algo precisa mudar, seguimos um processo formal. Isso garante que saibamos exatamente o que est√° sendo testado e que possamos reproduzir os testes se necess√°rio."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "O que √© uma 'baseline' no contexto do Gerenciamento de Configura√ß√£o?",
                    options: [
                      { text: "O primeiro caso de teste a ser executado.", correct: false },
                      { text: "Uma vers√£o formalmente aprovada de um item de configura√ß√£o, que serve como ponto de refer√™ncia.", correct: true },
                      { text: "O relat√≥rio final de defeitos do projeto.", correct: false },
                      { text: "A equipe respons√°vel por configurar o ambiente de teste.", correct: false }
                    ],
                    feedbackCorrect: "Exato! √â um ponto de partida confi√°vel e controlado.",
                    feedbackIncorrect: "Pense em uma 'foto' oficial de algo que n√£o pode ser mudada sem controle.",
                    explanation: "Uma baseline, em Gerenciamento de Configura√ß√£o, √© uma especifica√ß√£o ou produto que foi formalmente revisado e acordado, que serve como base para desenvolvimento ou controle futuro, e que s√≥ pode ser alterado por meio de procedimentos formais de controle de mudan√ßa."
                  },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Em ambientes de CI/CD (Integra√ß√£o/Entrega Cont√≠nua), o CM automatizado √© crucial para manter tudo consistente e rastre√°vel no pipeline de DevOps."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Um dos principais benef√≠cios do Gerenciamento de Configura√ß√£o para os testes √©:",
                    options: [
                        { text: "Garantir que todos os defeitos sejam corrigidos rapidamente.", correct: false },
                        { text: "Manter a rastreabilidade e o controle de vers√µes dos itens de teste e do objeto de teste.", correct: true },
                        { text: "Automatizar a execu√ß√£o de todos os casos de teste.", correct: false },
                        { text: "Reduzir o n√∫mero de casos de teste necess√°rios.", correct: false }
                    ],
                    feedbackCorrect: "Exato! Organiza√ß√£o e controle s√£o as palavras-chave do CM! üìÅ",
                    feedbackIncorrect: "Pense em como o CM ajuda a saber 'o qu√™' e 'qual vers√£o' estamos testando.",
                    explanation: "O Gerenciamento de Configura√ß√£o (CM) √© fundamental para garantir que todos os artefatos de teste e o pr√≥prio software sob teste sejam versionados, controlados e rastre√°veis, permitindo a reprodutibilidade dos testes e a compreens√£o das mudan√ßas."
                }
            ]
        },
        {
            id: "5.5", 
            title: "5.5 Gerenciamento de Defeitos", 
            icon: "üêû", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Encontrar defeitos √© um dos nossos superpoderes! ü¶∏ Mas precisamos gerenci√°-los. Um processo de Gerenciamento de Defeitos nos ajuda a registrar, analisar, classificar, corrigir e fechar os 'bugs'."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Um bom Relat√≥rio de Defeitos precisa de informa√ß√µes claras para que o defeito seja entendido e corrigido. Quais informa√ß√µes? Vamos ver!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Deve ter: ID √∫nico, T√≠tulo, Data, Autor, Objeto de teste, Ambiente, Contexto (passos para reproduzir!), Resultados esperados vs. reais, Severidade (impacto do defeito), Prioridade (urg√™ncia da corre√ß√£o) e Status (aberto, corrigido, fechado...). "
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual a diferen√ßa entre Severidade e Prioridade de um defeito?",
                    options: [
                      { text: "N√£o h√° diferen√ßa, s√£o sin√¥nimos.", correct: false },
                      { text: "Severidade √© o impacto no neg√≥cio, Prioridade √© o impacto t√©cnico.", correct: false },
                      { text: "Severidade √© o impacto do defeito no sistema, Prioridade √© a urg√™ncia com que deve ser corrigido.", correct: true },
                      { text: "Severidade √© definida pelo testador, Prioridade pelo desenvolvedor.", correct: false }
                    ],
                    feedbackCorrect: "Corret√≠ssimo! Um defeito grave pode ter baixa prioridade, e vice-versa.",
                    feedbackIncorrect: "Pense: um √© sobre o 'estrago', o outro sobre a 'pressa'.",
                    explanation: "Severidade refere-se ao grau de impacto que um defeito tem no desenvolvimento ou opera√ß√£o do sistema. Prioridade indica a urg√™ncia com que o defeito deve ser corrigido, geralmente definida com base no impacto no neg√≥cio."
                  },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Ao relatar um defeito, qual informa√ß√£o √© CRUCIAL para que os desenvolvedores possam investigar e corrigir o problema?",
                    options: [
                        { text: "A opini√£o do testador sobre a cor da interface.", correct: false },
                        { text: "Os passos detalhados para reproduzir a falha.", correct: true },
                        { text: "Quantos casos de teste j√° foram executados.", correct: false },
                        { text: "O nome da ferramenta de automa√ß√£o usada.", correct: false }
                    ],
                    feedbackCorrect: "Perfeito! Sem os passos, √© como procurar uma agulha no palheiro! üòâ",
                    feedbackIncorrect: "Pense no que o desenvolvedor MAIS precisa para entender o problema.",
                    explanation: "Os passos detalhados para reproduzir a falha s√£o essenciais em um relat√≥rio de defeitos, pois permitem que os desenvolvedores observem o problema em seus pr√≥prios ambientes e entendam as condi√ß√µes que levaram √† falha."
                }
            ]
        },
    ]
  },
  {
    id: "ch6",
    title: "Cap√≠tulo 6: Ferramentas de Teste",
    characterIcon: "üõ†Ô∏è", 
    description: "Conhe√ßa as ferramentas que auxiliam nos testes.",
    lessons: [
        {
            id: "6.1", 
            title: "6.1 Suporte de Ferramentas para Testes", 
            icon: "üß∞", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "As ferramentas de teste s√£o nossas assistentes m√°gicas! ü™Ñ Elas nos ajudam em muitas atividades, tornando nosso trabalho mais eficiente. Existem ferramentas para quase tudo!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Temos ferramentas de Gerenciamento (de requisitos, testes, defeitos, configura√ß√£o), de Teste Est√°tico (an√°lise de c√≥digo), de Projeto e Implementa√ß√£o de Testes (gerar casos de teste), de Execu√ß√£o e Cobertura, de Teste N√£o Funcional (performance, seguran√ßa), para DevOps (CI/CD) e de Colabora√ß√£o!"
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Uma ferramenta que ajuda a verificar automaticamente se o c√≥digo segue padr√µes de codifica√ß√£o √© um exemplo de ferramenta de:",
                    options: [
                        { text: "Gerenciamento de Teste", correct: false },
                        { text: "Teste Est√°tico", correct: true },
                        { text: "Execu√ß√£o de Teste", correct: false },
                        { text: "Teste N√£o Funcional", correct: false }
                    ],
                    feedbackCorrect: "Isso mesmo! An√°lise est√°tica √© poderosa para qualidade de c√≥digo! ‚ú®",
                    feedbackIncorrect: "Lembre-se, teste est√°tico n√£o executa o c√≥digo, apenas o analisa.",
                    explanation: "Ferramentas de an√°lise est√°tica examinam o c√≥digo (ou outros artefatos) sem execut√°-lo, para encontrar defeitos, inconsist√™ncias, ou desvios de padr√µes de codifica√ß√£o."
                },
                 {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Ferramentas que auxiliam na execu√ß√£o de testes de carga e estresse pertencem a qual categoria principal?",
                    options: [
                      { text: "Ferramentas de Teste Est√°tico", correct: false },
                      { text: "Ferramentas de Gerenciamento de Configura√ß√£o", correct: false },
                      { text: "Ferramentas de Teste N√£o Funcional", correct: true },
                      { text: "Ferramentas de Projeto de Testes", correct: false }
                    ],
                    feedbackCorrect: "Correto! Testes de carga e estresse avaliam caracter√≠sticas n√£o funcionais como performance e robustez.",
                    feedbackIncorrect: "Pense se essas ferramentas verificam 'o qu√™' o sistema faz ou 'qu√£o bem' ele faz sob certas condi√ß√µes.",
                    explanation: "Ferramentas para testes de carga, estresse, performance, seguran√ßa, etc., s√£o classificadas como ferramentas de Teste N√£o Funcional, pois avaliam caracter√≠sticas de qualidade do software que n√£o s√£o suas funcionalidades diretas."
                  }
            ]
        },
        {
            id: "6.2", 
            title: "6.2 Benef√≠cios e Riscos da Automa√ß√£o de Teste", 
            icon: "ü§ñ", 
            locked: true, 
            completed: false, 
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Automatizar testes √© como ter um rob√¥ ajudante! ü§ñ Quais os benef√≠cios? Economia de tempo em tarefas repetitivas (regress√£o!), consist√™ncia (rob√¥s n√£o se cansam), preven√ß√£o de erros humanos, avalia√ß√£o objetiva (cobertura) e feedback mais r√°pido!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Mas cuidado! Existem riscos. Expectativas irreais (automa√ß√£o n√£o resolve tudo!), custos e esfor√ßo para introduzir e manter a automa√ß√£o, escolher a ferramenta errada, ou depender demais dela e esquecer do pensamento cr√≠tico humano."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual √© um RISCO comum ao introduzir automa√ß√£o de testes?",
                    options: [
                      { text: "Redu√ß√£o do tempo de execu√ß√£o de testes de regress√£o.", correct: false },
                      { text: "Aumento da consist√™ncia na execu√ß√£o dos testes.", correct: false },
                      { text: "Subestimar o esfor√ßo necess√°rio para manter os scripts de teste automatizados.", correct: true },
                      { text: "Melhora na detec√ß√£o de defeitos repetitivos.", correct: false }
                    ],
                    feedbackCorrect: "Exato! Manter os rob√¥s atualizados d√° trabalho!",
                    feedbackIncorrect: "Pense nos desafios e problemas que podem surgir com a automa√ß√£o.",
                    explanation: "Um risco comum da automa√ß√£o de testes √© subestimar o esfor√ßo cont√≠nuo necess√°rio para manter os scripts de teste automatizados, especialmente quando o software sob teste muda frequentemente."
                  },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual √© um benef√≠cio CHAVE da automa√ß√£o de testes, especialmente para testes de regress√£o?",
                    options: [
                        { text: "Elimina a necessidade de testes manuais.", correct: false },
                        { text: "√â sempre mais barata que o teste manual a curto prazo.", correct: false },
                        { text: "Aumenta a consist√™ncia e repetibilidade da execu√ß√£o de testes.", correct: true },
                        { text: "Encontra todos os tipos de defeitos automaticamente.", correct: false }
                    ],
                    feedbackCorrect: "Perfeito! Rob√¥s s√£o √≥timos em repetir tarefas sem errar! üëç",
                    feedbackIncorrect: "Pense na principal vantagem de ter uma m√°quina fazendo algo repetitivo.",
                    explanation: "A automa√ß√£o de testes, especialmente para su√≠tes de regress√£o que s√£o executadas frequentemente, oferece grande consist√™ncia e repetibilidade, reduzindo o esfor√ßo manual e a chance de erros humanos em tarefas repetitivas."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Entender os benef√≠cios e riscos da automa√ß√£o √© fundamental! Mas como realmente trazer essas ferramentas para o dia a dia? Vamos explorar algumas considera√ß√µes estrat√©gicas a seguir. ü§î"
                }
            ]
        },
        {
            id: "6.3",
            title: "6.3 Considera√ß√µes Estrat√©gicas para Ferramentas de Teste",
            icon: "üéØ",
            locked: true,
            completed: false,
            slides: [
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Ol√° novamente, Mestre dos Testes! J√° vimos os tipos de ferramentas e os pr√≥s e contras da automa√ß√£o. Mas como escolher e implementar ferramentas de forma inteligente na sua equipe ou projeto? üßê"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Primeiro, defina uma estrat√©gia clara! Pergunte-se: Quais s√£o nossos maiores desafios de teste? Onde a automa√ß√£o traria mais valor? Quais processos queremos melhorar? N√£o compre uma ferramenta s√≥ porque est√° na moda!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Um passo crucial √© realizar um Projeto Piloto! üß™ Escolha uma √°rea pequena e representativa para testar a ferramenta. Isso ajuda a entender a curva de aprendizado, a integra√ß√£o com seus sistemas e os benef√≠cios reais antes de um grande investimento."
                },
                {
                    type: 'quiz',
                    character: 'professorBugsy',
                    question: "Qual o principal benef√≠cio de realizar um Projeto Piloto antes de adotar uma nova ferramenta de teste em larga escala?",
                    options: [
                      { text: "Garantir 100% de cobertura de teste imediatamente.", correct: false },
                      { text: "Avaliar a ferramenta em um contexto real, identificar desafios e benef√≠cios antes de um grande investimento.", correct: true },
                      { text: "Substituir completamente os testes manuais.", correct: false },
                      { text: "Treinar toda a equipe de uma vez.", correct: false }
                    ],
                    feedbackCorrect: "Exato! Um piloto √© um 'test drive' inteligente para a ferramenta! üöóüí®",
                    feedbackIncorrect: "Pense bem... O piloto serve para experimentar e aprender em menor escala primeiro.",
                    explanation: "Um projeto piloto permite avaliar a adequa√ß√£o da ferramenta, os desafios de implementa√ß√£o e os benef√≠cios potenciais em um ambiente controlado e com menor risco, antes de um rollout completo."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Pense tamb√©m no ROI (Retorno sobre o Investimento). A automa√ß√£o tem custos (ferramenta, treinamento, manuten√ß√£o dos scripts). Compare esses custos com os benef√≠cios esperados (tempo economizado, detec√ß√£o mais r√°pida de defeitos, melhor qualidade)."
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "E n√£o se esque√ßa do fator humano! Treinamento adequado, mudan√ßa cultural e o envolvimento da equipe s√£o essenciais para o sucesso da ado√ß√£o de qualquer ferramenta. Uma ferramenta √© t√£o boa quanto as pessoas que a utilizam! üßë‚Äçüíªü§ù"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Com uma boa estrat√©gia, avalia√ß√£o cuidadosa e foco no valor, as ferramentas de teste podem se tornar aliadas poderosas na sua jornada pela qualidade do software! Continue explorando e aprendendo!"
                },
                {
                    type: 'content',
                    character: 'professorBugsy',
                    text: "Parab√©ns, Mestre dos Testes em forma√ß√£o! Voc√™ concluiu todos os cap√≠tulos do TestQuest Aventura! Continue praticando e aprendendo, o mundo do software precisa de her√≥is como voc√™! üéâ‚ú®"
                }
            ]
        }
    ]
  }
];

// App State
let currentScreen = 'home';
let currentModuleId = null;
let currentLessonId = null;
let currentSlideIndex = 0;
let quizAnswered = false;
let selectedOptionIndex = null;
let isCorrectAnswer = null;

const appContainer = document.getElementById('app-container');

function saveState() {
    localStorage.setItem('codeGuardianProData', JSON.stringify(syllabusData));
    localStorage.setItem('codeGuardianProProgress', JSON.stringify({
        currentScreen, currentModuleId, currentLessonId, currentSlideIndex
    }));
}

function loadState() {
    const savedData = localStorage.getItem('codeGuardianProData');
    if (savedData) {
        const loadedModules = JSON.parse(savedData);
        syllabusData.forEach(module => {
            const loadedModule = loadedModules.find(lm => lm.id === module.id);
            if (loadedModule) {
                module.lessons.forEach(lesson => {
                    const loadedLesson = loadedModule.lessons.find(ll => ll.id === lesson.id);
                    if (loadedLesson) {
                        lesson.completed = loadedLesson.completed;
                        lesson.locked = loadedLesson.locked;
                    }
                });
            }
        });
    }
     const savedProgress = localStorage.getItem('codeGuardianProProgress');
    if (savedProgress) {
        const progress = JSON.parse(savedProgress);
        currentScreen = progress.currentScreen || 'home';
        currentModuleId = progress.currentModuleId || null;
        currentLessonId = progress.currentLessonId || null;
        currentSlideIndex = progress.currentSlideIndex || 0;
    }
}


function renderApp() {
  appContainer.innerHTML = ''; 

  const header = document.createElement('header');
  header.className = 'header';
  appContainer.appendChild(header);

  const titleText = document.createElement('span');
  titleText.className = 'header-title';
  
  let currentTitle = "CodeGuardian Pro"; 

  if (currentScreen === 'home') {
    if (currentModuleId) {
        const module = syllabusData.find(m => m.id === currentModuleId);
        if (module) currentTitle = module.title;
    } else {
        currentTitle = "CodeGuardian Pro"; 
    }
  } else if (currentScreen === 'lesson' && currentModuleId && currentLessonId) {
    const module = syllabusData.find(m => m.id === currentModuleId);
    const lesson = module?.lessons.find(l => l.id === currentLessonId);
    if (lesson) {
      currentTitle = lesson.title;
    }
  }
  titleText.textContent = currentTitle;


  if (currentScreen === 'lesson' || (currentScreen === 'home' && currentModuleId)) {
    const backButton = document.createElement('button');
    backButton.className = 'header-edge-element back-button';
    backButton.innerHTML = '&larr; Voltar'; 
    backButton.setAttribute('aria-label', 'Voltar');
    backButton.onclick = () => {
        if (currentScreen === 'lesson') {
            currentScreen = 'home'; 
            currentSlideIndex = 0;
            quizAnswered = false;
            selectedOptionIndex = null;
            isCorrectAnswer = null;
        } else if (currentModuleId) { 
            currentModuleId = null; 
        }
        renderApp();
    };
    header.appendChild(backButton);
    header.appendChild(titleText); 

    const spacer = document.createElement('div');
    spacer.className = 'header-edge-element header-spacer';
    spacer.innerHTML = '&larr; Voltar'; 
    header.appendChild(spacer);
    header.style.justifyContent = 'space-between';


  } else { 
    header.appendChild(titleText);
    header.style.justifyContent = 'center'; 
  }
  

  if (currentScreen === 'home') {
    renderHomeScreen();
  } else if (currentScreen === 'lesson' && currentModuleId && currentLessonId) {
    const module = syllabusData.find(m => m.id === currentModuleId);
    const lesson = module?.lessons.find(l => l.id === currentLessonId);
    if (lesson) {
      renderLessonScreen(lesson);
    } else {
      currentScreen = 'home'; 
      renderApp();
    }
  }
  saveState();
}

function renderHomeScreen() {
  const screen = document.createElement('div');
  screen.className = 'home-screen';

  if (!currentModuleId) { 
    const modulesTitle = document.createElement('h2');
    modulesTitle.className = 'screen-main-title';
    modulesTitle.textContent = 'M√≥dulos de Aprendizagem';
    screen.appendChild(modulesTitle);

    const moduleList = document.createElement('ul');
    moduleList.className = 'module-list';
    moduleList.setAttribute('role', 'list');

    syllabusData.forEach(module => {
      const listItem = document.createElement('li');
      listItem.className = 'module-item';
      listItem.setAttribute('role', 'listitem');
      listItem.setAttribute('tabindex', '0');
      listItem.innerHTML = `
        <div class="module-info">
          <h3>${module.title}</h3>
          <p>${module.description}</p>
        </div>
      `;
      listItem.onclick = () => {
        currentModuleId = module.id;
        renderApp();
      };
      listItem.onkeydown = (e) => { if (e.key === 'Enter' || e.key === ' ') listItem.click(); };
      moduleList.appendChild(listItem);
    });
    screen.appendChild(moduleList);

  } else { 
    const module = syllabusData.find(m => m.id === currentModuleId);
    if (!module) {
      currentModuleId = null; 
      renderApp(); return;
    }
    const lessonsTitle = document.createElement('h3');
    lessonsTitle.className = 'screen-subtitle';
    lessonsTitle.textContent = 'Li√ß√µes Dispon√≠veis:';
    screen.appendChild(lessonsTitle);


    const lessonList = document.createElement('ul');
    lessonList.className = 'lesson-list';
    lessonList.setAttribute('role', 'list');

    module.lessons.forEach(lesson => {
      const listItem = document.createElement('li');
      listItem.className = 'lesson-item' + (lesson.locked ? ' locked' : '') + (lesson.completed ? ' completed' : '');
      listItem.setAttribute('role', 'listitem');
      listItem.setAttribute('tabindex', lesson.locked ? '-1' : '0');
      listItem.setAttribute('aria-disabled', lesson.locked.toString());
      if (lesson.completed) {
        listItem.setAttribute('aria-label', `${lesson.title} - Completado`);
      } else if (lesson.locked) {
        listItem.setAttribute('aria-label', `${lesson.title} - Bloqueado`);
      }

      const lessonInfo = document.createElement('div');
      lessonInfo.className = 'lesson-info';
      const lessonTitleH3 = document.createElement('h3');
      lessonTitleH3.textContent = lesson.title;
      lessonInfo.appendChild(lessonTitleH3);

      listItem.appendChild(lessonInfo);
      
      if (!lesson.locked) {
        listItem.onclick = () => {
          currentLessonId = lesson.id;
          currentScreen = 'lesson';
          currentSlideIndex = 0;
          quizAnswered = false;
          selectedOptionIndex = null;
          isCorrectAnswer = null;
          renderApp();
        };
        listItem.onkeydown = (e) => { if (e.key === 'Enter' || e.key === ' ') listItem.click(); };
      }
      lessonList.appendChild(listItem);
    });
    screen.appendChild(lessonList);
  }
  appContainer.appendChild(screen);
}

function renderLessonScreen(lesson) {
  const screen = document.createElement('div');
  screen.className = 'lesson-screen';

  if (!lesson.slides || lesson.slides.length === 0 || currentSlideIndex >= lesson.slides.length) {
    const emptyLessonView = document.createElement('div');
    emptyLessonView.className = 'lesson-screen-content'; 
    
    const messageContainer = document.createElement('div'); 
    messageContainer.style.textAlign = 'center';
    messageContainer.style.padding = '20px';
    
    const messageTitle = document.createElement('h3');
    messageTitle.textContent = 'Li√ß√£o em Constru√ß√£o!';
    messageContainer.appendChild(messageTitle); 

    const messageText = document.createElement('p');
    messageText.textContent = 'Nossos amiguinhos est√£o trabalhando para trazer este conte√∫do. Volte em breve!';
    messageContainer.appendChild(messageText);
    
    emptyLessonView.appendChild(messageContainer);

    const navigation = document.createElement('div');
    navigation.className = 'lesson-navigation';
    const backButtonToLessons = document.createElement('button'); 
    backButtonToLessons.className = 'nav-button';
    backButtonToLessons.textContent = 'Voltar √†s Li√ß√µes';
    backButtonToLessons.onclick = () => {
        currentScreen = 'home'; 
        currentLessonId = null; 
        currentSlideIndex = 0; 
        quizAnswered = false;
        selectedOptionIndex = null;
        isCorrectAnswer = null;
        renderApp();
    };
    navigation.appendChild(backButtonToLessons);
    emptyLessonView.appendChild(navigation); 
    screen.appendChild(emptyLessonView);
    appContainer.appendChild(screen); 
    return; 
  }
  
  const contentWrapper = document.createElement('div');
  contentWrapper.className = 'lesson-screen-content';

  const progressBarContainer = document.createElement('div');
  progressBarContainer.className = 'progress-bar-container';
  const progressBar = document.createElement('div');
  progressBar.className = 'progress-bar';
  progressBar.style.width = `${((currentSlideIndex + 1) / (lesson.slides.length || 1)) * 100}%`;
  progressBarContainer.appendChild(progressBar);
  contentWrapper.appendChild(progressBarContainer);


  const slide = lesson.slides[currentSlideIndex];
  const character = characters[slide.character];

  const characterArea = document.createElement('div');
  characterArea.className = 'character-area';
  
  const speechBubble = document.createElement('div');
  speechBubble.className = 'speech-bubble';

  characterArea.appendChild(speechBubble); 
  contentWrapper.appendChild(characterArea);

  if (slide.type === 'content') {
    speechBubble.innerHTML = `<p>${slide.text}</p>`;
  } else if (slide.type === 'quiz') {
    speechBubble.innerHTML = `<div class="question" role="heading" aria-level="3">${slide.question}</div>`;
    
    const optionsList = document.createElement('ul');
    optionsList.className = 'quiz-options';
    optionsList.setAttribute('role', 'radiogroup');
    slide.options.forEach((option, index) => {
      const li = document.createElement('li');
      const button = document.createElement('button');
      button.textContent = option.text;
      button.setAttribute('role', 'radio');
      button.setAttribute('aria-checked', (selectedOptionIndex === index).toString());
      if (quizAnswered) {
        button.disabled = true;
        if (option.correct) button.classList.add('correct');
        else if (selectedOptionIndex === index) button.classList.add('incorrect');
      } else {
         button.onclick = () => {
            selectedOptionIndex = index;
            renderApp(); 
         };
      }
      if (selectedOptionIndex === index) {
        button.classList.add('selected');
      }
      li.appendChild(button);
      optionsList.appendChild(li);
    });
    speechBubble.appendChild(optionsList);

    if (quizAnswered) {
      const feedbackArea = document.createElement('div');
      feedbackArea.className = 'feedback-area';
      if (isCorrectAnswer) {
        feedbackArea.classList.add('correct');
        feedbackArea.textContent = slide.feedbackCorrect;
      } else {
        feedbackArea.classList.add('incorrect');
        feedbackArea.textContent = slide.feedbackIncorrect;
      }
      if (slide.explanation) {
        const explanationP = document.createElement('p');
        explanationP.className = 'explanation';
        explanationP.textContent = slide.explanation;
        feedbackArea.appendChild(explanationP);
      }
      speechBubble.appendChild(feedbackArea);
    }
  }
  
  screen.appendChild(contentWrapper);

  const navigation = document.createElement('div');
  navigation.className = 'lesson-navigation';
  const navButton = document.createElement('button');
  navButton.className = 'nav-button';
  
  if (slide.type === 'quiz' && !quizAnswered) {
    navButton.textContent = 'Verificar';
    navButton.disabled = selectedOptionIndex === null;
    navButton.onclick = () => {
      quizAnswered = true;
      if (selectedOptionIndex !== null && slide.type === 'quiz') { 
        isCorrectAnswer = slide.options[selectedOptionIndex].correct;
      }
      renderApp(); 
    };
  } else if (currentSlideIndex < lesson.slides.length - 1) {
    navButton.textContent = 'Pr√≥ximo';
    navButton.onclick = () => {
      currentSlideIndex++;
      quizAnswered = false;
      selectedOptionIndex = null;
      isCorrectAnswer = null;
      renderApp();
    };
  } else { 
    navButton.textContent = 'Concluir Li√ß√£o';
    navButton.onclick = () => {
      lesson.completed = true;
      const module = syllabusData.find(m => m.id === currentModuleId);
      const currentLessonIndex = module.lessons.findIndex(l => l.id === currentLessonId);
      if (currentLessonIndex !== -1 && currentLessonIndex < module.lessons.length - 1) {
        module.lessons[currentLessonIndex + 1].locked = false;
      } else if (currentLessonIndex !== -1 && currentLessonIndex === module.lessons.length - 1) {
        const currentModuleIndex = syllabusData.findIndex(m => m.id === currentModuleId);
        if (currentModuleIndex !== -1 && currentModuleIndex < syllabusData.length - 1) {
            const nextModule = syllabusData[currentModuleIndex + 1];
            if (nextModule && nextModule.lessons.length > 0) {
                nextModule.lessons[0].locked = false;
            }
        }
      }

      currentScreen = 'home';
      currentLessonId = null; 
      currentSlideIndex = 0;
      quizAnswered = false;
      selectedOptionIndex = null;
      isCorrectAnswer = null;
      renderApp();
    };
  }

  navigation.appendChild(navButton);
  screen.appendChild(navigation);
  appContainer.appendChild(screen);
}

function initThreeJSBackground() {
    let scene;
    let camera;
    let renderer;
    let particles;
    let mouseX = 0;
    let mouseY = 0;

    const canvas = document.createElement('canvas');
    canvas.id = 'three-canvas';
    document.body.prepend(canvas);

    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 150; 

    renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true }); 
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.setClearColor(0x000000, 0); 

    const particleCount = 7000; 
    const positions = new Float32Array(particleCount * 3);
   
    for (let i = 0; i < particleCount * 3; i++) {
        positions[i] = (Math.random() - 0.5) * 600; 
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    
    const isDarkMode = document.body.classList.contains('dark-mode');
    const particleBaseColor = isDarkMode ? 0xffffff : 0xaaaaaa; 

    const material = new THREE.PointsMaterial({
        size: 2.2, 
        color: particleBaseColor,
        blending: THREE.AdditiveBlending, 
        depthWrite: false, 
        transparent: true,
        sizeAttenuation: true,
    });

    particles = new THREE.Points(geometry, material);
    scene.add(particles);

    document.addEventListener('mousemove', onDocumentMouseMove, false);

    function onDocumentMouseMove(event) {
        mouseX = (event.clientX - window.innerWidth / 2) / 4; 
        mouseY = (event.clientY - window.innerHeight / 2) / 4;
    }

    function animate() {
        requestAnimationFrame(animate);
        particles.rotation.x += 0.0002; 
        particles.rotation.y += 0.0003;
        camera.position.x += (mouseX - camera.position.x) * 0.02; 
        camera.position.y += (-mouseY - camera.position.y) * 0.02; 
        camera.lookAt(scene.position);
        renderer.render(scene, camera);
    }
    animate();

    window.addEventListener('resize', onWindowResize, false);
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    }
}

loadState();
renderApp();
initThreeJSBackground();